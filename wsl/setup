#!/usr/bin/env bash

# Exit on error
set -e

# set target directory for home manager configuration
TOOLSDIR="${HOME}/tools"

# Function to strip surrounding quotes from a string
strip_quotes() {
  echo "$1" | sed -e 's/^"//' -e 's/"$//' -e "s/^'//" -e "s/'$//"
}

extract_system() {
  SYSINF=$(nix-shell -p nix-info --run "nix-info -m" | grep 'system:' | awk '{print $3}')
  SYSINF=$(echo "$SYSINF" | tr -d '"')
  SYSINF=$(echo "$SYSINF" | tr -d '`')
}

# Function to output the used credentials
output_credentials() {
  echo "The sandbox is installed, using the following configuration:\nSystem: ${SYSINF}\nLinux user: ${USER}\nGitHub user: ${NME}\nGitHub eMail: ${EML}"
}

# Function to set the user information in the nix config files
create_config() {
  echo "creating config ..."

  # extract system platform from nix
  extract_system
  
  echo "System: ${SYSINF}"
  
  # override placeholder in home manager files
  sed -i "s/_USRNAME_/${USER}/g" "${TOOLSDIR}/home.nix"
  sed -i "s/_GHUSER_/${NME}/g" "${TOOLSDIR}/home.nix"
  sed -i "s/_GHEMAIL_/${EML}/g" "${TOOLSDIR}/home.nix" 
  sed -i "s/_SYSTEM_/${SYSINF}/g" "${TOOLSDIR}/flake.nix"


  # create a new home manager generation
  cd "$TOOLSDIR/" && home-manager switch -b backup --flake .#"$USER"
}

install_lix() {
  echo "installing lix ..."

  curl -sSf -L https://install.lix.systems/lix | sh -s -- install --no-confirm
  . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
}

# Function to install home-manager
install_home_manager() {
  echo "installing home manager ..."

  # activating experimental features
  echo "experimental-features = nix-command flakes\ntrusted-users = root ${USER}" | sudo tee -a /etc/nix/nix.conf

  # add the home-manager package channel
  nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager

  # update the home manager channel
  nix-channel --update

# create the first home-manager generation
  nix-shell '<home-manager>' -A install

  # add the nix path to `.bashrc`
  echo '. "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh"' >> "$HOME/.profile"
}

clone_repo() {
  echo "cloning home manager configuration ..."

  # clone the default home-manager configuration
  nix-shell -p gh --run "mkdir $HOME/temp/
    gh auth login -h github.com -s user && \
    gh api user > $HOME/temp/ghusr.json && \
    gh api user/emails > $HOME/temp/ghml.json && \
    gh repo clone hcops/sandbox ${TOOLSDIR}"

  # retrieve and cache user identifier
  NME=$(nix-shell -p jq --run "jq -r '.login' ${HOME}/temp/ghusr.json")
  EML=$(nix-shell -p jq --run "jq '.[] | select(.primary == true) | .email' ${HOME}/temp/ghml.json")
  EML=$(strip_quotes "$EML")

  # remove temp configuration files
  rm -rf "$HOME"/temp
}

write_config() {
  echo "writing home manager ..."

  # create symbolic links to the configuration files
  for config_file in home.nix flake.nix; do
    config_path="${HOME}/.config/home-manager/$config_file"
    if [ -f "$config_path" ]; then
      echo "'$config_file' already exists, replacing..."
      rm "$config_path"
    else
      echo "${config_file} does not exist, creating ..."
    fi
    ln -s "${TOOLSDIR}/$config_file" "${HOME}/.config/home-manager/$config_file";
  done
}

activate_direnv() {
  echo "activating direnv ..."

  echo 'eval "$(direnv hook bash)"' >> "$HOME"/.bashrc   # activate direnv
  # echo 'eval "$(direnv hook bash)"' | sudo tee -a $(readlink "$HOME/.bashrc") # alternative for nix-direnv
  sudo systemctl restart nix-daemon   # restart nix daemon and return the used credentials
}

# Define a function named "main"
main() {
  install_lix
  clone_repo
  install_home_manager
  create_config
  write_config
  activate_direnv
  output_credentials
  exec "${SHELL}" && eval "$(direnv hook bash)"
}

# Call the "main" function with all the command-line arguments
main "$@"
